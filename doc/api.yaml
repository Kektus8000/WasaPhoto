openapi: 3.0.0
info:
  title: WasaPhoto 2023/2024
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you
  version: "15"

components:
  schemas:
    user:
      description: An user registered on WasaPhoto
      type: object
      properties:
        userID:
          description: The user identifier in the system
          type: integer
        username:
          description: The name of an user registered in the system
          type: string
          example: Simone
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
    
    userProfile:
      description: The user profile of an user on WasaPhoto
      type: object
      properties:
        userID:
          description: The userID of profile's owner
          type: integer
        username:
          description: The username of profile's owner
          type: string
          example: Simone
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        followers:
          description: Users following the user
          type: array
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 1000
        followings:
          description: Users followed by the user
          type: array
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 1000
        banList:
          description: Users banned by the user
          type: array
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 1000
        publishedPhotos:
          description: The photos uploaded by the user
          type: array 
          items: {$ref: "#/components/schemas/photo"}
          minItems: 0
          maxItems: 1000
        stream:
          description: A collection of photos published by following users
          type: array
          items: {$ref: "#/components/schemas/photo"}
          minItems: 0
          maxItems: 1000

    photo:
      description: A photo saved on WasaPhoto database
      type: object
      properties:
        file:
          description: The photo's file
          type: string
          format: binary
          example: /tmp/userProfile/1/publishedPhotos/2
          minLength: 20
          maxLength: 1000
        photoID:
          description: Photo's identifier
          type: integer
          example: 161273
        publisherID:
          description: Publisher's identifier
          type: integer
          example: 192112
        pubblicationDate:
          description: The date when the photo as been published
          type: string
          format: dd/mm/yyyy
          example: 25/12/2023
          minLength: 10
          maxLength: 10
        comments:
          description: A collection of comments left by the users
          type: array
          items: {$ref: "#/components/schemas/comment"}
          minItems: 0
          maxItems: 1000
        likes:
          description: A collection of users who left a like on the photo
          type: array
          items: {$ref: "#/components/schemas/user/properties/userID"}
          minItems: 0
          maxItems: 1000

    comment:
      description: A comment left by an user in a photo published on WasaPhoto
      type: object
      properties:
        commentID:
          description: The comment identifier
          type: integer
          example: 128182
        comment:
          description: The comment itself
          type: string
          example: Nice Work
          pattern: '^.*?$'
          minLength: 6
          maxLength: 160
        publisherID:
          description: Publisher's identifier
          type: integer
          example: 192112
        photoID:
          description: The ID of the photo
          type: integer
          example: 118182
          

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
        
paths:
  /session:
    post:
      tags: ["doLogin"]
      summary: Logs in the user
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
          description: User details
          content:
            application/json:
              schema:
                description: Username used to log-in
                type: string
                example: Simone
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
          required: true
      responses:
        '201':
          description: User wasn't in the system, so a new user has been created
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        '204':
          description: User log-in action successful

  /user/:
    put:
      tags: ["searchUser"]
      summary: Get users by their username
      operationId: searchUser
      requestBody:
        content:
          application/json:
            schema:
              description: The username to search
              type: string
              pattern: '^.*?$'
              minLength: 3
              maxLength: 16
              example: Miriam
      responses:
        '201':
          description: User's with similar names
          content:
            application/json:
              schema:
                description: A collection of users who have similar names to the one asked
                type: array
                items: {$ref: "#/components/schemas/user"}
                minItems: 0
                maxItems: 1000
        '500':
          description: The userlist couldn't be retrived due to a server error
        
  
  /userProfile/{userID}:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's id to get the profile
        type: integer
    get:
      tags: ["getUserProfile"]
      summary: Get user profile
      description: |
        Get the profile of an user with that username. If not found, return an error.
      operationId: getUserProfile
      responses:
        '201':
          description: The user is in the system and you can visit his/her profile.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userProfile"}
        '403':
          description: You are in the user banlist, so you can't visit user's profile.
        '404':
          description: The user isn't registered in the system.
        '500':
          description: The userProfile couldn't be retrieved due to a server error
      security:
      - bearerAuth: [] 
  
  /user/{userID}/username:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's id to get the profile
        type: integer
  
    put:
      tags: ["setMyUsername"]
      summary: Modify previous username
      description: |
        Modify the old username of the user with the new one asked as parameter.
      operationId: setMyUserName
      requestBody:
        content:
          text/plain:
            schema:
              description: New username for the user
              type: string
              pattern: '^.*?$'
              minLength: 3
              maxLength: 16
              example: Miriam
      responses:
        '202':
          description: The username has been updated.Ã¹     
        '403':
          description: There is an user with already that name
        '404':  
          description: Authentication error
        '500':
          description: The username couldn't be changed due to a server error
      security:
      - bearerAuth: [] 

  /userProfile/{userID}/following/{followerID}:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's Id
        type: integer

    - name: followerID
      in : path
      required: true
      schema:
        description: Follower's Id
        type: integer

    put:
      tags: ["followUser"]
      summary: Follow an user
      description: Add an user on your following list
      operationId: followUser
      responses:
        '202':
          description: The user has been added to the following list
        '403':
          description: You can't add the user in you following list because you are in its banList
        '404':
          description: Authentication error
        '500':
          description: The user couldn't be followed due to a server error
      security:
      - bearerAuth: [] 

    delete:
      tags: ["unfollowUser"]
      summary: Un-Follow an user
      description: Remove an user from your following list
      operationId: unfollowUser
      responses:
        '204':
          description: The user has been removed from the following list
        '404':
          description: Authentication error
        '500':
          description: The user couldn't be unfollowed due to a server error
      security:
      - bearerAuth: [] 

  /userProfile/{userID}/stream/:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's Id
        type: integer
    get:
      tags: ["getMyStream"]
      summary: Get stream
      description: Get the user's stream by collecting the photo
      operationId: getMyStream
      responses:
        '201':
          description: The stream has been collected
          content:
            image/jpeg:
              schema: {$ref: '#/components/schemas/userProfile/properties/stream'}
        '404':
          description: Authentication error
        '500':
          description: The stream couldn't be retrieved due to a server error
      security:
      - bearerAuth: [] 

  /userProfile/{userID}/banList/{bannedID}:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's id
        type: integer
    - name: bannedID
      in : path
      required : true
      schema:
        description: User's id to ban
        type: integer
    
    put:
      tags: ["banUser"]
      summary: Ban an user
      description: Add an ID in the collection of banneds
      operationId: banUser
      responses:
        '202':
          description: The user has been added to the banList
        '404':
          description: Authentication error
        '500':
          description: The user couldn't be banned due to a server error
        
      security:
      - bearerAuth: [] 

    delete:
      tags: ["unbanUser"]
      summary: Un-ban an user
      description: Remove an user from your banlist. This way, your profile can be viewed by the user.
      operationId: unbanUser
      responses:
        '204':
          description: The user has been removed from the banlist.
        '404':
          description: Authentication error
        '500':
          description: The user couldn't be unbanned due to a server error
      security:
      - bearerAuth: [] 
        
  /userProfile/{userID}/publishedPhotos/:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's id
        type: integer

    post:
      tags: ["uploadPhoto"]
      summary: Add a photo
      description: Add a photo to user's list of published photos.
      operationId: uploadPhoto 
      requestBody:
        description: The photo to add
        content:
          image/jpeg:
              schema: {$ref: '#/components/schemas/photo/properties/file'}
        required: true
      responses:
        '201':
          description: The photo has been added to the list of published photos.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/photo'}
        '404':
          description: Authentication error
        '500':
          description: The photo couldn't be uploaded due to a server error
      security:
      - bearerAuth: [] 
          
  /userProfile/{userID}/publishedPhotos/{photoID}:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's id
        type: integer
    - name : photoID
      in : path
      required: true
      schema:
          description: The ID of the photo to remove
          type: integer
    delete:
      tags: ["deletePhoto"]
      summary: Remove published photo
      description: Remove a photo published by the user
      operationId: deletePhoto
      responses: 
        '204':
          description: The photo has been removed from the list of your published photos
        '403':
          description: You can't delete the photo because it isn't your photo
        '404':
          description: Authentication error
        '500':
          description: The photo couldn't be deleted due to a server error
      security:
      - bearerAuth: [] 
  
  /userProfile/{userID}/stream/{photoID}/likes/:
    parameters:
    - name : userID
      in : path
      required: true
      schema:
        description: User's ID
        type: integer
    - name : photoID
      in : path
      required: true
      schema:
        description: Photo's ID
        type: integer

    put:
        tags: ["likePhoto"]
        summary: Add like to photo
        description: Add a like to the photo, updating the like counter
        operationId: likePhoto
        responses:
            '201':
              description: The photo has been liked.
              content:
                application/json:
                  schema: {$ref: '#/components/schemas/photo/properties/likes'}
            '403':
              description: Cannot like the photo because you've been banned by the user.
            '404':
              description: Authentication error
            '500':
             description: The photo couldn't be liked due to a server error
        security:
        - bearerAuth: [] 
    
    delete:
          tags: ["unlikePhoto"]
          summary: Remove like from photo
          description: Remove like from photo, decreasing the like counter.
          operationId: unlikePhoto
          responses:
            '204':
              description: The like has been removed from the photo.
            '404':
              description: Authentication error
            '500':
              description: The photo couldn't be unliked due to a server error
          security:
          - bearerAuth: [] 
  
  /userProfile/{userID}/stream/{photoID}/comments/:
    parameters:
    - name : photoID
      in : path
      required: true
      schema:
        description: Photo's id
        type: integer
    - name: userID
      in : path
      required: true
      schema:
        description: Publisher's user ID
        type: integer
    
    post:
      tags: ["commentPhoto"]
      summary: Add a comment on a photo
      description: Add a comment to the collection of comment
      operationId: commentPhoto
      requestBody:
        description: The comment to add to the photo
        content:
          application/json:
            schema:
              type: string
              example: Nice Photo
              pattern: '^.*?$'
              minLength: 6
              maxLength: 160
        required: true
      responses:
        '201':
          description: The comment has been added to the photo
          content:
            application/json:
              schema: {$ref: "#/components/schemas/comment"}
        '400':
          description: The comment length isn't right
        '403':
          description: The comment hasn't been added because you are in user banned list
        '404':
          description: Authentication error
        '500':
          description: The comment couldn't be uploaded due to a server error
      security:
      - bearerAuth: [] 
  
  /userProfile/{userID}/stream/{photoID}/comments/{commentID}:
    parameters:
    - name : photoID
      in : path
      required: true
      schema:
        description: Photo's id
        type: integer
    - name: commentID
      in : path
      required: true
      schema:
        description: Comment'ID
        type: integer
    - name: userID
      in : path
      required: true
      schema:
        description: Publisher's user ID
        type: integer
    delete:
      tags: ["uncommentPhoto"]
      summary: Remove a comment from a photo
      description: Remove the comment from the collection of comments
      operationId: uncommentPhoto
      responses:
        '204':
          description: The comment has been removed from the photo
        '404':
          description: Authentication error
        '500':
          description: The comment couldn't be deleted due to a server error
      security:
      - bearerAuth: []
