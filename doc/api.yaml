openapi: 3.0.0
info:
  title: WasaPhoto 2023/2024
  description: |
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you
  version: "4"

components:
  schemas:
    user:
      description: An user registered on WasaPhoto
      type: object
      properties:
        userId:
          description: The user identifier in the system
          type: integer
        username:
          description: The name of an user registered in the system
          type: string
          example: Simone
          minLength: 6
          maxLength: 20
        following:
          description: Users followed by the user
          type: array
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 9999999999
        followers:
          description: Users following the user
          type: array
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 9999999999
        banList:
          description: Users banned by the user
          type: array 
          items: {$ref: "#/components/schemas/user"}
          minItems: 0
          maxItems: 9999999999
        publishedPhotos:
          description: The photos uploaded by the user
          type: array 
          items: {$ref: "#/components/schemas/photos"}
          minItems: 0
          maxItems: 9999999999
    
    photos:
      description: A photo uploaded on WasaPhoto by a registered user
      type: object
      properties:
        photoId:
          description: The photo's identifier
          type: integer
        likes:
          description: The number of like the photo received by the users
          type: integer
          minimum: 0
        comments:
          description: The comments left by the users
          schema: {$ref: "#/components/schemas/comments"}
          minItems: 0
          maxItems: 1000
        pubblicationDate:
          description: The date when the photo as been published
          type: string
          format: dd/mm/yyyy
          example: 25/12/2023
          minLength: 10
          maxLength: 10
        
    
    comments:
      description: A comment left by an user in a photo published on WasaPhoto
      type: object
      properties:
        commentId:
          description: The comment identifier
          type: integer
        comment:
          description: The comment itself
          type: string
          minLength: 1
          maxLength: 160
        userPublisher:
          description: The id of the user who wrote the comment
          type: integer
        
paths:
  /session:
    post:
      tags: ["doLogin"]
      summary: Logs in the user
      description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Maria
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 16
          required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 101293
  
  /user/{userId}/username:
    parameters:
    - name : userId
      in : path
      required: true
      schema:
        type: integer
    get:
      tags: ["getUserProfile"]
      summary: Get user profile
      description: |
        Get the profile of an user with that username. If not found, return an error.
      operationId: getUserProfile
      responses:
        '200':
          description: The user is in the system and you can visit his/her profile.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/user"}
        '403':
          description: You are in the user banlist, so you can't visit user's profile.
        '404':
          description: The user isn't registered in the system.
  
    post:
      tags: ["setMyUsername"]
      summary: Modify previous user name
      description: |
        Modify the old username of the user with the new one asked as parameter.
      operationId: setMyUserName
      requestBody:
        description: The new username
        content:
          application/json:
            schema:
              type: string
              example: Maria
      responses:
        '200':
          description: The username has been updated.

  /user/{userId}/following/user/{followerId}:
    parameters:
    - name : userId
      in : path
      required: true
      schema:
        type: integer
    - name: followerId
      in : path
      required: true
      schema:
        type: integer

    post:
      tags: ["followUser"]
      summary: Follow an user
      description: Add an user on your following list
      operationId: followUser
      responses:
        '200':
          description: The user has been added to the following list
        '404':
          description: The user wasn't in the system

    delete:
      tags: ["unfollowUser"]
      summary: Un-Follow an user
      description: Remove an user from your following list
      operationId: unfollowUser
      responses:
        '200':
          description: The user has been removed from the following list
        '400':
          description: The user wasn't in the following list

  /user/{userId}:
    parameters:
    - name : userId
      in : path
      required: true
      schema:
        type: integer
    get:
      tags: ["getMyStream"]
      summary: Get stream
      description: Get the user's stream by collecting the photo
      operationId: getMyStream
      responses:
        '200':
          description: The stream has been collected
          content:
            image/jpeg:
              schema:
                type: array
                items: {$ref: '#/components/schemas/photos'}

  /user/{userId}/banList:
    parameters:
    - name : userId
      in : path
      required: true
      schema:
        type: integer
    post:
      tags: ["banUser"]
      summary: Ban an user
      description: Add an user in the banlist. This way, the user cannot view the photos uploaded by you.
      operationId: banUser
      parameters: 
      - name: bannedId
        in : query
        required : true
        schema:
          type: integer
      responses:
        '201':
          description: The user has been added to the banList
        '400':
          description: The user was already in the banlist
        '404':
          description: The user doesn't exist in the system
  
    delete:
      tags: ["unbanUser"]
      summary: Un-ban an user
      description: Remove an user from your banlist. This way, your profile can be viewed by the user.
      operationId: unbanUser
      parameters: 
      - name: bannedId
        in : query
        required : true
        schema:
          type: integer
      responses:
        '200':
          description: The user has been removed from the banlist.
        '400':
          description: The user wasn't in the banlist, so he can't be removed.
        
  /user/{userId}/publishedPhotos:
    parameters:
    - name : userId
      in : path
      required: true
      schema:
        type: integer

    post:
      tags: ["uploadPhoto"]
      summary: Add a photo
      description: Add a photo to user's list of published photos.
      operationId: uploadPhoto 
      requestBody:
        description: The photo to add
        content:
          image/jpeg:
              schema: {$ref: "#/components/schemas/photos"}
      responses:
        '201':
          description: The photo has been added to the list of published photos.

    delete:
      tags: ["deletePhoto"]
      summary: Remove published photo
      description: Remove a photo published by the user
      operationId: deletePhoto
      parameters:
      - name: photoId
        in : query
        required: true
        schema:
          type: integer
      responses: 
        '201':
          description: The photo has been removed from the list of published photos
        '404':
          description: There isn't a photo with that Id, so it can't be removed.
  
  /photos/{photoId}/likes:
    parameters:
    - name : photoId
      in : path
      required: true
      schema:
        type: integer

    post:
        tags: ["likePhoto"]
        summary: Add like to photo
        description: Add a like to the photo, updating the like counter
        operationId: likePhoto 
        responses:
            '200':
              description: The photo has been liked.
            '403':
              description: Cannot like the photo because you've been banned by the user.
            '404':
              description: The photo hasn't been found, so the like cannot be added

    delete:
          tags: ["unlikePhoto"]
          summary: Remove like from photo
          description: Remove like from photo, decreasing the like counter.
          operationId: unlikePhoto 
          responses:
            '200':
              description: The like has been removed from the photo.
            '404':
              description: The photo hasn't been found, so the like cannot be removed.

  /photos/{photoId}/comments:
    parameters:
    - name : photoId
      in : path
      required: true
      schema:
        type: integer

    post:
      tags: ["commentPhoto"]
      summary: Add a comment on a photo
      description: Add a comment to the collection of comment
      operationId: commentPhoto
      requestBody:
        description: The comment to add to the photo
        content:
          application/json:
            schema: {$ref: "#/components/schemas/comments"}
      responses:
        '201':
          description: The comment has been added to the photo

        '400':
          description: The comment hasn't been added to the photo due to an error

        '403':
          description: The comment hasn't been added because you are in user's banned list

    delete:
      tags: ["uncommentPhoto"]
      summary: Remove a comment from a photo
      description: Remove the comment from the collection of comments
      operationId: uncommentPhoto
      parameters:
        - name: commentId
          in : query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The comment has been removed from the photo

        '404':
          description: The comment hasn't been found in photo's comments